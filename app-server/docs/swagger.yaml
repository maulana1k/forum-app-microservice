basePath: /api
definitions:
  dto.CreatePostRequest:
    properties:
      content:
        maxLength: 2000
        minLength: 1
        type: string
      image_url:
        type: string
      quoted_post_id:
        type: string
      tags:
        type: string
    required:
    - content
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: integer
      details:
        type: string
      message:
        type: string
    type: object
  dto.PaginatedPostsResponse:
    properties:
      has_next_page:
        type: boolean
      has_prev_page:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      posts:
        items:
          $ref: '#/definitions/dto.PostResponse'
        type: array
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.PostAuthor:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      display_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  dto.PostResponse:
    properties:
      author:
        $ref: '#/definitions/dto.PostAuthor'
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      image_url:
        type: string
      is_bookmarked:
        type: boolean
      is_liked:
        type: boolean
      is_reposted:
        type: boolean
      likes_count:
        type: integer
      quoted_post:
        type: string
      replies:
        items:
          $ref: '#/definitions/dto.ReplyResponse'
        type: array
      replies_count:
        type: integer
      reposts_count:
        type: integer
      tags:
        type: string
      updated_at:
        type: string
    type: object
  dto.ReplyResponse:
    properties:
      author:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  dto.SigninRequest:
    properties:
      email:
        example: admin@example.com
        type: string
      password:
        example: admin
        type: string
    type: object
  dto.SignupRequest:
    properties:
      email:
        example: admin@example.com
        type: string
      password:
        example: admin
        type: string
      username:
        example: admin
        type: string
    type: object
  dto.UpdatePostRequest:
    properties:
      content:
        maxLength: 2000
        minLength: 1
        type: string
      image_url:
        type: string
      tags:
        type: string
    type: object
  dto.UserResponse:
    properties:
      avatarUrl:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      displayName:
        type: string
      id:
        type: string
      location:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/maulana1k/forum-app
  description: This is a simple RESTful API for a forum application.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Forum App API
  version: "1.0"
paths:
  /health:
    get:
      description: Checks if the server and database are running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - Health
  /v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Signin with email and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.SigninRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Signup with username, email and password
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Auth
  /v1/posts/:
    get:
      consumes:
      - application/json
      description: Retrieve all posts with pagination support
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of posts per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaginatedPostsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all posts with pagination
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post with content, tags, and optional image
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - Posts
  /v1/posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing post (only by author)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Post deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Retrieve a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing post (only by author)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - Posts
  /v1/posts/{id}/like:
    post:
      consumes:
      - application/json
      description: Like a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Like a post
      tags:
      - Posts
  /v1/posts/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Unlike a previously liked post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unlike a post
      tags:
      - Posts
  /v1/posts/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all posts created by a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of posts per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaginatedPostsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get posts by user ID
      tags:
      - Posts
  /v1/recommendation/posts:
    get:
      description: Retrieve personalized posts feed based on userID and topic
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Topic filter
        in: query
        name: topic
        type: string
      - description: Max number of posts
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PostResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get recommended posts for user
      tags:
      - Recommendations
  /v1/users/:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all user profiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all user profiles
      tags:
      - Users
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific user profile by its UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a user by UUID
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
